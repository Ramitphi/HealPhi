{"version":3,"sources":["../src/hooks/useLocalScreenShare.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport useHuddle01 from './useHuddle01';\nimport type { CustomMediaKind } from '@huddle01/web-core/types';\nimport type { Producer } from '@huddle01/web-core/types';\n\nexport const useLocalScreenShare = (props?: {\n  onProduceStart?: (producer: Producer) => void;\n  onProduceClose?: (label: string) => void;\n  onProduceError?: () => void;\n}) => {\n  const { huddleClient } = useHuddle01();\n\n  const localPeer = huddleClient.localPeer;\n\n  const [shareStream, setShareStream] = useState<MediaStream | null>(\n    localPeer.getStream({ label: 'screen-share' }),\n  );\n\n  const handleStreamFetched = useCallback(\n    (data: {\n      mediaKind: CustomMediaKind;\n      stream: MediaStream;\n    }) => {\n      if (data.mediaKind === 'screen') {\n        setShareStream(data.stream);\n      }\n    },\n    [],\n  );\n\n  const handleStreamPlayable = useCallback(\n    (data: {\n      label: string;\n      producer: Producer;\n    }) => {\n      if (data.label === 'screen-share-video') {\n        if (props?.onProduceStart) props?.onProduceStart(data.producer);\n      }\n      if (data.label === 'screen-share-audio') {\n        if (props?.onProduceStart) props?.onProduceStart(data.producer);\n      }\n    },\n    [props?.onProduceStart],\n  );\n\n  const handleCloseStream = useCallback(\n    (data: {\n      label: string;\n      mediakind?: CustomMediaKind;\n      reason?: { code: number; tag: string; message?: string };\n    }) => {\n      if (data.label === 'screen-share-video') {\n        setShareStream(null);\n        if (props?.onProduceClose) props?.onProduceClose(data.label);\n      }\n\n      if (data.label === 'screen-share-audio') {\n        setShareStream(null);\n\n        if (props?.onProduceClose) props?.onProduceClose(data.label);\n      }\n    },\n    [props?.onProduceClose],\n  );\n\n  useEffect(() => {\n    localPeer.on('stream-fetched', handleStreamFetched);\n\n    localPeer.on('stream-playable', handleStreamPlayable);\n\n    localPeer.on('stream-closed', handleCloseStream);\n\n    return () => {\n      localPeer.off('stream-fetched', handleStreamFetched);\n\n      localPeer.off('stream-playable', handleStreamPlayable);\n\n      localPeer.off('stream-closed', handleCloseStream);\n    };\n  }, []);\n\n  const startScreenShare = localPeer.startScreenShare;\n\n  const stopScreenShare = localPeer.stopScreenShare;\n\n  const audioTrack = shareStream?.getAudioTracks()[0] || null;\n\n  const videoTrack = shareStream?.getVideoTracks()[0] || null;\n\n  return {\n    shareStream,\n    startScreenShare,\n    stopScreenShare,\n    audioTrack,\n    videoTrack,\n  };\n};\n"],"mappings":";;;;;AAAA,SAAS,aAAa,WAAW,gBAAgB;AAM1C,IAAM,sBAAsB,CAAC,UAI9B;AACJ,QAAM,EAAE,aAAa,IAAI,oBAAY;AAErC,QAAM,YAAY,aAAa;AAE/B,QAAM,CAAC,aAAa,cAAc,IAAI;AAAA,IACpC,UAAU,UAAU,EAAE,OAAO,eAAe,CAAC;AAAA,EAC/C;AAEA,QAAM,sBAAsB;AAAA,IAC1B,CAAC,SAGK;AACJ,UAAI,KAAK,cAAc,UAAU;AAC/B,uBAAe,KAAK,MAAM;AAAA,MAC5B;AAAA,IACF;AAAA,IACA,CAAC;AAAA,EACH;AAEA,QAAM,uBAAuB;AAAA,IAC3B,CAAC,SAGK;AACJ,UAAI,KAAK,UAAU,sBAAsB;AACvC,YAAI,OAAO;AAAgB,iBAAO,eAAe,KAAK,QAAQ;AAAA,MAChE;AACA,UAAI,KAAK,UAAU,sBAAsB;AACvC,YAAI,OAAO;AAAgB,iBAAO,eAAe,KAAK,QAAQ;AAAA,MAChE;AAAA,IACF;AAAA,IACA,CAAC,OAAO,cAAc;AAAA,EACxB;AAEA,QAAM,oBAAoB;AAAA,IACxB,CAAC,SAIK;AACJ,UAAI,KAAK,UAAU,sBAAsB;AACvC,uBAAe,IAAI;AACnB,YAAI,OAAO;AAAgB,iBAAO,eAAe,KAAK,KAAK;AAAA,MAC7D;AAEA,UAAI,KAAK,UAAU,sBAAsB;AACvC,uBAAe,IAAI;AAEnB,YAAI,OAAO;AAAgB,iBAAO,eAAe,KAAK,KAAK;AAAA,MAC7D;AAAA,IACF;AAAA,IACA,CAAC,OAAO,cAAc;AAAA,EACxB;AAEA,YAAU,MAAM;AACd,cAAU,GAAG,kBAAkB,mBAAmB;AAElD,cAAU,GAAG,mBAAmB,oBAAoB;AAEpD,cAAU,GAAG,iBAAiB,iBAAiB;AAE/C,WAAO,MAAM;AACX,gBAAU,IAAI,kBAAkB,mBAAmB;AAEnD,gBAAU,IAAI,mBAAmB,oBAAoB;AAErD,gBAAU,IAAI,iBAAiB,iBAAiB;AAAA,IAClD;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,mBAAmB,UAAU;AAEnC,QAAM,kBAAkB,UAAU;AAElC,QAAM,aAAa,aAAa,eAAe,EAAE,CAAC,KAAK;AAEvD,QAAM,aAAa,aAAa,eAAe,EAAE,CAAC,KAAK;AAEvD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}