import {
  useHuddle01_default
} from "./chunk-B6M254MV.js";

// src/hooks/useDevices.ts
import { useEffect, useState } from "react";
var useDevices = (props) => {
  const { type } = props;
  const { huddleClient } = useHuddle01_default();
  const localPeer = huddleClient.localPeer;
  const deviceHandler = localPeer.deviceHandler;
  const devices = deviceHandler.devices.get(type) || [];
  const [preferredDeviceId, setPreferredDeviceId] = useState(
    deviceHandler.preferredDevices.get(type) || null
  );
  const [, setDeviceCount] = useState(devices.length);
  useEffect(() => {
    const handlePermissionGranted = (data) => {
      if (data.deviceKind === type) {
        props.onPermissionGranted?.();
      }
    };
    const handlePermissionDenied = (data) => {
      if (data.deviceKind === type) {
        props.onPermissionDenied?.();
      }
    };
    const handleDeviceChange = () => {
      const devices2 = deviceHandler.devices.get(type) || [];
      setDeviceCount(devices2.length);
    };
    const handlePrefferedDeviceChange = (data) => {
      if (data.deviceKind === type) {
        setPreferredDeviceId(data.deviceId);
        setDeviceCount(devices.length);
      }
    };
    deviceHandler.once("permission-granted", handlePermissionGranted);
    deviceHandler.once("permission-denied", handlePermissionDenied);
    deviceHandler.on("device-change", handleDeviceChange);
    deviceHandler.on("preferred-device-change", handlePrefferedDeviceChange);
    return () => {
      deviceHandler.off("permission-granted", handlePermissionGranted);
      deviceHandler.off("permission-denied", handlePermissionDenied);
      deviceHandler.off("device-change", handleDeviceChange);
      deviceHandler.off("preferred-device-change", handlePrefferedDeviceChange);
    };
  }, []);
  const getPermission = () => {
    return deviceHandler.getMediaPermission({ mediaDeviceKind: type });
  };
  const fetchStream = deviceHandler.fetchStream;
  const setPreferredDevice = (deviceId) => {
    return deviceHandler.setPreferredDevice({
      deviceKind: type,
      deviceId
    });
  };
  const preferredDevice = devices.find((device) => device.deviceId === preferredDeviceId) || null;
  return {
    devices,
    preferredDeviceId,
    preferredDevice,
    fetchStream,
    getPermission,
    setPreferredDevice
  };
};

export {
  useDevices
};
//# sourceMappingURL=chunk-PQOWXERL.js.map