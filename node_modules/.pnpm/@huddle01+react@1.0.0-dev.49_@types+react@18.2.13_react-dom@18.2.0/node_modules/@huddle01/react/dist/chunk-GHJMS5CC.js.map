{"version":3,"sources":["../src/hooks/usePeerIds.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport useHuddle01 from './useHuddle01';\n\nexport const usePeerIds = (props?: {\n  roles?: string[];\n  labels?: Array<\n    'audio' | 'video' | 'screen-share-video' | 'screen-share-audio' | string\n  >;\n\n  onPeerRoleUpdate?: (data: {\n    peerId: string;\n    newRole: string;\n    prevRole: string;\n  }) => void;\n}) => {\n  const { huddleClient } = useHuddle01();\n\n  const room = huddleClient.room;\n\n  const [peerIds, setPeerIds] = useState<string[]>([]);\n\n  const isValidPeer = useCallback(\n    (data: {\n      searchLabelSet: Set<string>;\n      validRoles: Set<string>;\n      labels: string[];\n      role: string | null;\n    }) => {\n      if (props?.labels) {\n        for (const label of data.labels) {\n          if (data.searchLabelSet.has(label)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      if (props?.roles && data.role && !data.validRoles.has(data.role)) {\n        return false;\n      }\n      return true;\n    },\n    [],\n  );\n\n  const handleSearch = useCallback(\n    (peerIds: string[]) => {\n      const validPeers: string[] = [];\n\n      const searchLabelSet = new Set(props?.labels);\n\n      const validRoles = new Set(props?.roles);\n\n      for (const peerId of peerIds) {\n        const remotePeer = room.remotePeerExists(peerId);\n\n        const remotePeerLabels = remotePeer?.labels || [];\n\n        const role = remotePeer?.role || null;\n\n        if (\n          isValidPeer({\n            searchLabelSet,\n            validRoles,\n            labels: remotePeerLabels,\n            role,\n          })\n        ) {\n          validPeers.push(peerId);\n        }\n      }\n\n      return validPeers;\n    },\n    [props?.labels],\n  );\n\n  useEffect(() => {\n    setPeerIds(handleSearch(room.peerIds));\n  }, []);\n\n  useEffect(() => {\n    const handlePeerChange = () => {\n      const newPeerIds = handleSearch(room.peerIds);\n      setPeerIds(newPeerIds);\n    };\n\n    const handleStreamAdded = (data: { peerId: string; label: string }) => {\n      if (props?.labels?.includes(data.label)) {\n        setPeerIds(handleSearch(room.peerIds));\n      }\n    };\n\n    const handleRoleUpdate = (data: {\n      peerId: string;\n      newRole: string;\n      prevRole: string;\n    }) => {\n      if (props?.onPeerRoleUpdate) {\n        props.onPeerRoleUpdate(data);\n      }\n\n      if (props?.roles?.includes(data?.prevRole)) {\n        setPeerIds(handleSearch(room.peerIds));\n      } else if (props?.roles?.includes(data.newRole)) {\n        setPeerIds(handleSearch(room.peerIds));\n      }\n    };\n\n    if (room.state !== 'connected') {\n      room.on('room-joined', handlePeerChange);\n    }\n\n    room.on('new-peer-joined', handlePeerChange);\n\n    room.on('peer-left', handlePeerChange);\n\n    if (props?.labels) {\n      room.on('stream-added', handleStreamAdded);\n      room.on('stream-closed', handleStreamAdded);\n    }\n\n    if (props?.roles) {\n      room.on('room-role-updated', handleRoleUpdate);\n    }\n\n    return () => {\n      room.off('new-peer-joined', handlePeerChange);\n\n      room.off('peer-left', handlePeerChange);\n\n      room.off('room-joined', handlePeerChange);\n\n      if (props?.labels) {\n        room.off('stream-added', handleStreamAdded);\n        room.off('stream-closed', handleStreamAdded);\n      }\n\n      if (props?.roles) {\n        room.off('room-role-updated', handleRoleUpdate);\n      }\n    };\n  }, [props?.labels]);\n\n  return {\n    peerIds,\n  };\n};\n"],"mappings":"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","names":["peerIds"]}