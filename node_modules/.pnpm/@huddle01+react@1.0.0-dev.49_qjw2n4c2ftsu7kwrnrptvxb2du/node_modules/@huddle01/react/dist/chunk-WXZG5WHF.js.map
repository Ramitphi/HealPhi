{"version":3,"sources":["../src/hooks/useLocalPeer.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport useHuddle01 from './useHuddle01';\nimport { TPermissions } from 'types/dist/common.types';\n\nexport const useLocalPeer = <T = unknown>(props?: {\n  onMetadataUpdated?: (metadata: T) => void;\n  onPermissionsUpdated?: (permissions: TPermissions) => void;\n  onRoleUpdated?: (role: string) => void;\n}) => {\n  const { huddleClient } = useHuddle01();\n\n  const localPeer = huddleClient.localPeer;\n\n  const peerId = localPeer.peerId;\n\n  const [permissions, setPermissions] = useState<TPermissions>(\n    localPeer.permissions,\n  );\n\n  const [role, setRole] = useState<string | null>(localPeer.role);\n\n  const [metadata, setMetadata] = useState<T | null>(\n    localPeer.getMetadata<T>() ?? null,\n  );\n\n  const handleUpdateMetadata = useCallback(() => {\n    const newMetadata = localPeer.getMetadata<T>();\n\n    if (props?.onMetadataUpdated) props.onMetadataUpdated(newMetadata);\n\n    setMetadata(newMetadata);\n  }, [props?.onMetadataUpdated]);\n\n  const handlePermissionsUpdated = useCallback(\n    (data: {\n      permissions: TPermissions;\n      role?: string;\n    }) => {\n      if (props?.onPermissionsUpdated) {\n        props.onPermissionsUpdated(data.permissions);\n      }\n\n      if (data.role !== undefined) {\n        if (props?.onRoleUpdated) props.onRoleUpdated(data.role);\n        setRole(data.role);\n      }\n\n      setPermissions(data.permissions);\n    },\n    [props?.onPermissionsUpdated, props?.onRoleUpdated],\n  );\n\n  const handleRoleUpdated = useCallback(\n    (data: { role: string }) => {\n      if (props?.onRoleUpdated) props.onRoleUpdated(data.role);\n\n      setRole(data.role);\n    },\n    [props?.onRoleUpdated],\n  );\n\n  useEffect(() => {\n    localPeer.on('metadata-updated', handleUpdateMetadata);\n\n    localPeer.on('permissions-updated', handlePermissionsUpdated);\n\n    localPeer.on('role-updated', handleRoleUpdated);\n\n    return () => {\n      localPeer.off('metadata-updated', handleUpdateMetadata);\n\n      localPeer.off('permissions-updated', handlePermissionsUpdated);\n\n      localPeer.off('role-updated', handleRoleUpdated);\n    };\n  }, []);\n\n  const updateMetadata = localPeer.updateMetadata<T>;\n\n  const updateRole = localPeer.updateRole;\n\n  return {\n    peerId,\n    role,\n    permissions,\n    metadata,\n    updateMetadata,\n    updateRole,\n  };\n};\n"],"mappings":";;;;;AAAA,SAAS,aAAa,WAAW,gBAAgB;AAI1C,IAAM,eAAe,CAAc,UAIpC;AACJ,QAAM,EAAE,aAAa,IAAI,oBAAY;AAErC,QAAM,YAAY,aAAa;AAE/B,QAAM,SAAS,UAAU;AAEzB,QAAM,CAAC,aAAa,cAAc,IAAI;AAAA,IACpC,UAAU;AAAA,EACZ;AAEA,QAAM,CAAC,MAAM,OAAO,IAAI,SAAwB,UAAU,IAAI;AAE9D,QAAM,CAAC,UAAU,WAAW,IAAI;AAAA,IAC9B,UAAU,YAAe,KAAK;AAAA,EAChC;AAEA,QAAM,uBAAuB,YAAY,MAAM;AAC7C,UAAM,cAAc,UAAU,YAAe;AAE7C,QAAI,OAAO;AAAmB,YAAM,kBAAkB,WAAW;AAEjE,gBAAY,WAAW;AAAA,EACzB,GAAG,CAAC,OAAO,iBAAiB,CAAC;AAE7B,QAAM,2BAA2B;AAAA,IAC/B,CAAC,SAGK;AACJ,UAAI,OAAO,sBAAsB;AAC/B,cAAM,qBAAqB,KAAK,WAAW;AAAA,MAC7C;AAEA,UAAI,KAAK,SAAS,QAAW;AAC3B,YAAI,OAAO;AAAe,gBAAM,cAAc,KAAK,IAAI;AACvD,gBAAQ,KAAK,IAAI;AAAA,MACnB;AAEA,qBAAe,KAAK,WAAW;AAAA,IACjC;AAAA,IACA,CAAC,OAAO,sBAAsB,OAAO,aAAa;AAAA,EACpD;AAEA,QAAM,oBAAoB;AAAA,IACxB,CAAC,SAA2B;AAC1B,UAAI,OAAO;AAAe,cAAM,cAAc,KAAK,IAAI;AAEvD,cAAQ,KAAK,IAAI;AAAA,IACnB;AAAA,IACA,CAAC,OAAO,aAAa;AAAA,EACvB;AAEA,YAAU,MAAM;AACd,cAAU,GAAG,oBAAoB,oBAAoB;AAErD,cAAU,GAAG,uBAAuB,wBAAwB;AAE5D,cAAU,GAAG,gBAAgB,iBAAiB;AAE9C,WAAO,MAAM;AACX,gBAAU,IAAI,oBAAoB,oBAAoB;AAEtD,gBAAU,IAAI,uBAAuB,wBAAwB;AAE7D,gBAAU,IAAI,gBAAgB,iBAAiB;AAAA,IACjD;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,iBAAiB,UAAU;AAEjC,QAAM,aAAa,UAAU;AAE7B,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}