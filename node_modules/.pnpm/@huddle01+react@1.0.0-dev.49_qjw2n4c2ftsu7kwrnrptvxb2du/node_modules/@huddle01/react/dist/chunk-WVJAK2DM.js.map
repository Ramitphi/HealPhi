{"version":3,"sources":["../src/hooks/useRemotePeer.ts"],"sourcesContent":["import { useRoom } from './useRoom';\nimport { useCallback, useEffect, useState } from 'react';\nimport type { RemotePeer } from '@huddle01/web-core';\nimport type { NewPeerJoined } from '@huddle01/web-core/types';\n\nexport const useRemotePeer = <T = unknown>(props: {\n  peerId: string;\n  onMetadataUpdate?: (data: { metadata: unknown }) => void;\n}) => {\n  const { room } = useRoom();\n\n  const [remotePeer, setRemotePeer] = useState<RemotePeer | null>(\n    room.remotePeerExists(props.peerId) || null,\n  );\n\n  const [metadata, setMetadata] = useState<T | null>(\n    remotePeer?.getMetadata<T>() || null,\n  );\n\n  const [role, setRole] = useState<RemotePeer['role'] | null>(\n    remotePeer?.role || null,\n  );\n\n  const handleRoleUpdate = useCallback(\n    (data: { role?: string | undefined }) => {\n      if (data?.role && data.role.length > 0) {\n        setRole(data.role);\n      }\n    },\n    [],\n  );\n\n  const handleNewPeerJoined = useCallback((data: NewPeerJoined) => {\n    if (data.peer.peerId === props.peerId) {\n      setRemotePeer(data.peer);\n    }\n  }, []);\n\n  const handlePeerLeft = useCallback((peerId: string) => {\n    if (peerId === props.peerId) {\n      setRemotePeer(null);\n    }\n  }, []);\n\n  const handleUpdateMetadata = useCallback(() => {\n    const metadata = remotePeer?.getMetadata<T>();\n\n    if (props?.onMetadataUpdate && metadata) {\n      props.onMetadataUpdate({ metadata });\n    }\n\n    if (metadata) setMetadata(metadata);\n    else setMetadata(null);\n  }, [props?.onMetadataUpdate]);\n\n  useEffect(() => {\n    room.on('new-peer-joined', handleNewPeerJoined);\n\n    room.on('peer-left', handlePeerLeft);\n\n    if (remotePeer) {\n      remotePeer?.on('metadata-updated', handleUpdateMetadata);\n\n      remotePeer?.on('role-updated', handleRoleUpdate);\n    }\n\n    return () => {\n      room.off('new-peer-joined', handleNewPeerJoined);\n\n      room.off('peer-left', handlePeerLeft);\n\n      remotePeer?.off('metadata-updated', handleUpdateMetadata);\n\n      remotePeer?.off('role-updated', handleRoleUpdate);\n    };\n  }, [remotePeer, handleUpdateMetadata, handleRoleUpdate]);\n\n  const peerId = remotePeer?.peerId;\n\n  const updateRole = (role: string) => {\n    if (remotePeer?.updateRole) {\n      remotePeer.updateRole({ role });\n    } else {\n      {\n        console.warn('‚ùå RemotePeer does not Exist, cannot update role');\n      }\n    }\n  };\n\n  return {\n    peerId,\n    role,\n    metadata,\n    updateRole,\n  };\n};\n"],"mappings":";;;;;AACA,SAAS,aAAa,WAAW,gBAAgB;AAI1C,IAAM,gBAAgB,CAAc,UAGrC;AACJ,QAAM,EAAE,KAAK,IAAI,QAAQ;AAEzB,QAAM,CAAC,YAAY,aAAa,IAAI;AAAA,IAClC,KAAK,iBAAiB,MAAM,MAAM,KAAK;AAAA,EACzC;AAEA,QAAM,CAAC,UAAU,WAAW,IAAI;AAAA,IAC9B,YAAY,YAAe,KAAK;AAAA,EAClC;AAEA,QAAM,CAAC,MAAM,OAAO,IAAI;AAAA,IACtB,YAAY,QAAQ;AAAA,EACtB;AAEA,QAAM,mBAAmB;AAAA,IACvB,CAAC,SAAwC;AACvC,UAAI,MAAM,QAAQ,KAAK,KAAK,SAAS,GAAG;AACtC,gBAAQ,KAAK,IAAI;AAAA,MACnB;AAAA,IACF;AAAA,IACA,CAAC;AAAA,EACH;AAEA,QAAM,sBAAsB,YAAY,CAAC,SAAwB;AAC/D,QAAI,KAAK,KAAK,WAAW,MAAM,QAAQ;AACrC,oBAAc,KAAK,IAAI;AAAA,IACzB;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,iBAAiB,YAAY,CAACA,YAAmB;AACrD,QAAIA,YAAW,MAAM,QAAQ;AAC3B,oBAAc,IAAI;AAAA,IACpB;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,uBAAuB,YAAY,MAAM;AAC7C,UAAMC,YAAW,YAAY,YAAe;AAE5C,QAAI,OAAO,oBAAoBA,WAAU;AACvC,YAAM,iBAAiB,EAAE,UAAAA,UAAS,CAAC;AAAA,IACrC;AAEA,QAAIA;AAAU,kBAAYA,SAAQ;AAAA;AAC7B,kBAAY,IAAI;AAAA,EACvB,GAAG,CAAC,OAAO,gBAAgB,CAAC;AAE5B,YAAU,MAAM;AACd,SAAK,GAAG,mBAAmB,mBAAmB;AAE9C,SAAK,GAAG,aAAa,cAAc;AAEnC,QAAI,YAAY;AACd,kBAAY,GAAG,oBAAoB,oBAAoB;AAEvD,kBAAY,GAAG,gBAAgB,gBAAgB;AAAA,IACjD;AAEA,WAAO,MAAM;AACX,WAAK,IAAI,mBAAmB,mBAAmB;AAE/C,WAAK,IAAI,aAAa,cAAc;AAEpC,kBAAY,IAAI,oBAAoB,oBAAoB;AAExD,kBAAY,IAAI,gBAAgB,gBAAgB;AAAA,IAClD;AAAA,EACF,GAAG,CAAC,YAAY,sBAAsB,gBAAgB,CAAC;AAEvD,QAAM,SAAS,YAAY;AAE3B,QAAM,aAAa,CAACC,UAAiB;AACnC,QAAI,YAAY,YAAY;AAC1B,iBAAW,WAAW,EAAE,MAAAA,MAAK,CAAC;AAAA,IAChC,OAAO;AACL;AACE,gBAAQ,KAAK,sDAAiD;AAAA,MAChE;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":["peerId","metadata","role"]}