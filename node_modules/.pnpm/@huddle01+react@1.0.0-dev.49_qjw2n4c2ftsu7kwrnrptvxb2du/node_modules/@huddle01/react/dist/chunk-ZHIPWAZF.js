import {
  useHuddle01_default
} from "./chunk-B6M254MV.js";

// src/hooks/useLocalAudio.ts
import { useCallback, useEffect, useState } from "react";
var useLocalAudio = (props) => {
  const { huddleClient } = useHuddle01_default();
  const localPeer = huddleClient.localPeer;
  const [stream, setStream] = useState(
    localPeer.getStream({ label: "audio" })
  );
  const handleStreamFetched = useCallback(
    (data) => {
      if (data.mediaKind === "mic") {
        setStream(data.stream);
      }
    },
    []
  );
  const handleStreamPlayable = useCallback(
    (data) => {
      if (data.label === "audio") {
        if (props?.onProduceStart)
          props?.onProduceStart(data.producer);
      }
    },
    [props?.onProduceStart]
  );
  const handleStreamClosed = useCallback(
    (data) => {
      if (data.label === "audio") {
        setStream(null);
        if (props?.onProduceClose)
          props?.onProduceClose(data.label);
      }
    },
    [props?.onProduceClose]
  );
  useEffect(() => {
    localPeer.on("stream-fetched", handleStreamFetched);
    localPeer.on("stream-playable", handleStreamPlayable);
    localPeer.on("stream-closed", handleStreamClosed);
    return () => {
      localPeer.off("stream-fetched", handleStreamFetched);
      localPeer.off("stream-playable", handleStreamPlayable);
      localPeer.off("stream-closed", handleStreamClosed);
    };
  }, []);
  const enableAudio = localPeer.enableAudio;
  const disableAudio = localPeer.disableAudio;
  const track = stream?.getAudioTracks()[0] || null;
  const isAudioOn = stream ? true : false;
  const replaceAudioStream = localPeer.replaceAudioStream;
  const changeAudioSource = localPeer.changeAudioSource;
  return {
    stream,
    track,
    isAudioOn,
    enableAudio,
    disableAudio,
    replaceAudioStream,
    changeAudioSource
  };
};

export {
  useLocalAudio
};
//# sourceMappingURL=chunk-ZHIPWAZF.js.map