import {
  useHuddle01_default
} from "./chunk-B6M254MV.js";

// src/hooks/useLocalVideo.ts
import { useCallback, useEffect, useState } from "react";
var useLocalVideo = (props) => {
  const { huddleClient } = useHuddle01_default();
  const localPeer = huddleClient.localPeer;
  const [stream, setStream] = useState(
    localPeer.getStream({ label: "video" })
  );
  const handleStreamFetched = useCallback(
    (data) => {
      if (data.mediaKind === "cam") {
        setStream(data.stream);
      }
    },
    []
  );
  const handleStreamClosed = useCallback(
    (data) => {
      if (data.label === "video") {
        setStream(null);
        if (props?.onProduceClose)
          props?.onProduceClose(data.reason);
      }
    },
    [props?.onProduceClose]
  );
  const handleStreamPlayable = useCallback(
    (data) => {
      if (data.label === "video") {
        if (props?.onProduceStart)
          props?.onProduceStart(data.producer);
      }
    },
    [props?.onProduceStart]
  );
  useEffect(() => {
    localPeer.on("stream-fetched", handleStreamFetched);
    localPeer.on("stream-playable", handleStreamPlayable);
    localPeer.on("stream-closed", handleStreamClosed);
    return () => {
      localPeer.off("stream-fetched", handleStreamFetched);
      localPeer.off("stream-playable", handleStreamPlayable);
      localPeer.off("stream-closed", handleStreamClosed);
    };
  }, []);
  const enableVideo = localPeer.enableVideo;
  const disableVideo = localPeer.disableVideo;
  const track = stream?.getVideoTracks()[0] || null;
  const isVideoOn = stream ? true : false;
  const replaceVideoStream = localPeer.replaceVideoStream;
  const changeVideoSource = localPeer.changeVideoSource;
  return {
    stream,
    track,
    isVideoOn,
    enableVideo,
    disableVideo,
    replaceVideoStream,
    changeVideoSource
  };
};

export {
  useLocalVideo
};
//# sourceMappingURL=chunk-2A5YT7TT.js.map