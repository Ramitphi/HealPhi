{"version":3,"sources":["../src/utils/createGenericContext.tsx","../src/HuddleContext.tsx"],"sourcesContent":["import React from 'react';\n\n// biome-ignore lint/complexity/noUselessTypeConstraint: <explanation>\nexport const createGenericContext = <T extends unknown>() => {\n  // Create a context with a generic parameter or undefined\n  const genericContext = React.createContext<T | undefined>(undefined);\n\n  // Check if the value provided to the context is defined or throw an error\n  const useGenericContext = () => {\n    const contextIsDefined = React.useContext(genericContext);\n    if (!contextIsDefined) {\n      throw new Error('‚ùå Nezuko client must be used within a NezukoProvider');\n    }\n    return contextIsDefined;\n  };\n\n  return [useGenericContext, genericContext.Provider] as const;\n};\n","import { HuddleClient } from '@huddle01/web-core';\nimport { createGenericContext } from './utils/createGenericContext.tsx';\n\ninterface Props {\n  children: React.ReactNode;\n  client: HuddleClient;\n}\n\nexport interface HuddleContextType {\n  huddleClient: HuddleClient;\n}\n\nconst [useHuddle01, HuddleContextProvider] =\n  createGenericContext<HuddleContextType>();\n\nconst HuddleProvider = ({ children, client }: Props) => (\n  <HuddleContextProvider value={{ huddleClient: client }}>\n    {children}\n  </HuddleContextProvider>\n);\n\nexport { HuddleProvider, useHuddle01 };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,WAAW;AAGX,IAAM,uBAAuB,MAAyB;AAE3D,QAAM,iBAAiB,MAAM,cAA6B,MAAS;AAGnE,QAAM,oBAAoB,MAAM;AAC9B,UAAM,mBAAmB,MAAM,WAAW,cAAc;AACxD,QAAI,CAAC,kBAAkB;AACrB,YAAM,IAAI,MAAM,2DAAsD;AAAA,IACxE;AACA,WAAO;AAAA,EACT;AAEA,SAAO,CAAC,mBAAmB,eAAe,QAAQ;AACpD;;;ACDE;AAJF,IAAM,CAAC,aAAa,qBAAqB,IACvC,qBAAwC;AAE1C,IAAM,iBAAiB,CAAC,EAAE,UAAU,OAAO,MACzC,oBAAC,yBAAsB,OAAO,EAAE,cAAc,OAAO,GAClD,UACH;","names":[]}