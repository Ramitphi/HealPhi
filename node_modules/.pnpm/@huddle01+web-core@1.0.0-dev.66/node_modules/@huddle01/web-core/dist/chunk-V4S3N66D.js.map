{"version":3,"sources":["../src/Permissions.ts"],"sourcesContent":["import { EnhancedEventEmitter } from './common-js/EnhancedEventEmitter';\nimport { TPermissions, ProduceSources } from 'types/dist/common.types';\nimport { mainLogger } from './logger';\n\nexport type PermissionEvents = {\n  updated: [data: { permissions: TPermissions }];\n};\n\nconst logger = mainLogger.createSubLogger('Permissions');\n\n/**\n * Permission Class of a Local Peer in a Room.\n *\n * `NOTE Permissions are enforced by the Server. and can be set using the token or can be updated by Remote Peers having admin access of the Room Joined`\n */\nclass Permissions extends EnhancedEventEmitter<PermissionEvents> {\n  /**\n   * Get the Singleton Instance of the Permissions Class.\n   */\n  private static __instance: Permissions;\n\n  /**\n   * Admin Access of the Room.\n   */\n  private __admin = false;\n\n  /**\n   * Can Consume Media Stream of the Room from RemotePeers;\n   */\n  private __canConsume = false;\n\n  /**\n   * Can Produce Media Stream to the Room\n   */\n  private __canProduce = true;\n\n  /**\n   * Allowed Sources to Produce Media Stream to the Room\n   */\n  private __canProduceSources: ProduceSources = {\n    cam: true,\n    mic: true,\n    screen: true,\n  };\n\n  /**\n   * Can Send Data to the Room, e.g. Chat Messages, update of avatar, name etc. to the room\n   */\n  private __canSendData = false;\n\n  /**\n   * Can Receive Data from the Room, e.g. Chat Messages, update of avatar, name etc. from other Remote Peers.\n   */\n  private __canRecvData = false;\n\n  /**\n   * Can Update Metadata of the Room, e.g. DisplayName, Avatar, etc.\n   */\n  private __canUpdateMetadata = false;\n\n  /**\n   * Custom Role of the Peer in the Room.\n   */\n  public __role: string | null = null;\n\n  /**\n   * Getter for the role of the peer.\n   */\n  public get role(): string | null {\n    return this.__role;\n  }\n\n  public set role(role: string) {\n    this.__role = role;\n  }\n\n  /**\n   * Get the Access Control List ( acl ) of the Local Peer in the Room.\n   */\n  public get acl(): TPermissions {\n    return {\n      admin: this.__admin,\n      canConsume: this.__canConsume,\n      canProduce: this.__canProduce,\n      canProduceSources: this.__canProduceSources,\n      canSendData: this.__canSendData,\n      canRecvData: this.__canRecvData,\n      canUpdateMetadata: this.__canUpdateMetadata,\n    };\n  }\n\n  /**\n   * Update the Permissions of the Local Peer in the Room. This will emit an event `updated` with the updated permissions.\n   *\n   * `NOTE: If the Peer is not an admin, then the permissions will not be updated on the server`\n   */\n  public updatePermissions(permissions: Partial<TPermissions>) {\n    logger.info('ðŸ”” Updating Permissions', permissions);\n\n    this.__admin = permissions.admin ?? this.__admin;\n    this.__canConsume = permissions.canConsume ?? this.__canConsume;\n    this.__canProduce = permissions.canProduce ?? this.__canProduce;\n    this.__canProduceSources =\n      permissions.canProduceSources ?? this.__canProduceSources;\n    this.__canSendData = permissions.canSendData ?? this.__canSendData;\n    this.__canRecvData = permissions.canRecvData ?? this.__canRecvData;\n    this.__canUpdateMetadata =\n      permissions.canUpdateMetadata ?? this.__canUpdateMetadata;\n  }\n\n  static createInstance() {\n    if (Permissions.__instance) return Permissions.__instance;\n\n    Permissions.__instance = new Permissions();\n\n    return Permissions.__instance;\n  }\n\n  static getInstance() {\n    if (!Permissions.__instance) {\n      throw new Error('Permissions Instance not created yet.');\n    }\n\n    return Permissions.__instance;\n  }\n\n  private constructor() {\n    super();\n  }\n\n  public reset() {\n    this.__admin = false;\n    this.__canConsume = false;\n    this.__canProduce = true;\n    this.__canProduceSources = {\n      cam: true,\n      mic: true,\n      screen: true,\n    };\n    this.__canSendData = false;\n    this.__canRecvData = false;\n    this.__canUpdateMetadata = false;\n    this.__role = null;\n  }\n}\n\nexport const checkPermissions = (permission: Partial<TPermissions>) => {\n  return {\n    validate: <T extends unknown[], R>(\n      fn: (...args: T) => R,\n    ): ((...args: T) => R) => {\n      return (...args: T): R => {\n        const peerPermission = Permissions.getInstance().acl;\n\n        if (permission.admin && !peerPermission.admin) {\n          throw new Error('Admin Access Required.');\n        }\n\n        if (permission.canConsume && !peerPermission.canConsume) {\n          throw new Error('Can Consume Access Required.');\n        }\n\n        if (permission.canProduce && !peerPermission.canProduce) {\n          throw new Error('Can Produce Access Required.');\n        }\n\n        if (\n          permission.canProduceSources?.cam &&\n          !peerPermission.canProduceSources.cam\n        ) {\n          throw new Error(\"Produce Sources Access Required. for 'cam'\");\n        }\n\n        if (\n          permission.canProduceSources?.mic &&\n          !peerPermission.canProduceSources.mic\n        ) {\n          throw new Error(\"Produce Sources Access Required. for 'mic'\");\n        }\n\n        if (\n          permission.canProduceSources?.screen &&\n          !peerPermission.canProduceSources.screen\n        ) {\n          throw new Error(\"Produce Sources Access Required. for 'screen'\");\n        }\n\n        if (permission.canSendData && !peerPermission.canSendData) {\n          throw new Error('Can Send Data Access Required.');\n        }\n\n        if (permission.canRecvData && !peerPermission.canRecvData) {\n          throw new Error('Can Recv Data Access Required.');\n        }\n\n        // Execute the provided function after successful validation\n        return fn(...args);\n      };\n    },\n  };\n};\n\ncheckPermissions({\n  canProduceSources: {\n    cam: true,\n    mic: true,\n    screen: true,\n  },\n});\n\nexport default Permissions;\n"],"mappings":"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","names":[]}