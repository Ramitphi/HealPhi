import { EnhancedEventEmitter } from './common-js/EnhancedEventEmitter.js';
import { TPermissions } from 'types/dist/common.types';

type PermissionEvents = {
    updated: [data: {
        permissions: TPermissions;
    }];
};
/**
 * Permission Class of a Local Peer in a Room.
 *
 * `NOTE Permissions are enforced by the Server. and can be set using the token or can be updated by Remote Peers having admin access of the Room Joined`
 */
declare class Permissions extends EnhancedEventEmitter<PermissionEvents> {
    /**
     * Get the Singleton Instance of the Permissions Class.
     */
    private static __instance;
    /**
     * Admin Access of the Room.
     */
    private __admin;
    /**
     * Can Consume Media Stream of the Room from RemotePeers;
     */
    private __canConsume;
    /**
     * Can Produce Media Stream to the Room
     */
    private __canProduce;
    /**
     * Allowed Sources to Produce Media Stream to the Room
     */
    private __canProduceSources;
    /**
     * Can Send Data to the Room, e.g. Chat Messages, update of avatar, name etc. to the room
     */
    private __canSendData;
    /**
     * Can Receive Data from the Room, e.g. Chat Messages, update of avatar, name etc. from other Remote Peers.
     */
    private __canRecvData;
    /**
     * Can Update Metadata of the Room, e.g. DisplayName, Avatar, etc.
     */
    private __canUpdateMetadata;
    /**
     * Custom Role of the Peer in the Room.
     */
    __role: string | null;
    /**
     * Getter for the role of the peer.
     */
    get role(): string | null;
    set role(role: string);
    /**
     * Get the Access Control List ( acl ) of the Local Peer in the Room.
     */
    get acl(): TPermissions;
    /**
     * Update the Permissions of the Local Peer in the Room. This will emit an event `updated` with the updated permissions.
     *
     * `NOTE: If the Peer is not an admin, then the permissions will not be updated on the server`
     */
    updatePermissions(permissions: Partial<TPermissions>): void;
    static createInstance(): Permissions;
    static getInstance(): Permissions;
    private constructor();
    reset(): void;
}
declare const checkPermissions: (permission: Partial<TPermissions>) => {
    validate: <T extends unknown[], R>(fn: (...args: T) => R) => (...args: T) => R;
};

export { PermissionEvents, checkPermissions, Permissions as default };
