{"version":3,"sources":["../../types/dist/socket.types.js","../src/Socket.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SocketCloseReason = exports.ESocketCloseCode = void 0;\nvar ESocketCloseCode;\n(function (ESocketCloseCode) {\n    ESocketCloseCode[ESocketCloseCode[\"ABNORMAL_CLOSURE\"] = 1006] = \"ABNORMAL_CLOSURE\";\n    ESocketCloseCode[ESocketCloseCode[\"NORMAL_CLOSURE\"] = 1000] = \"NORMAL_CLOSURE\";\n    ESocketCloseCode[ESocketCloseCode[\"BROWSER_TAB_CLOSE\"] = 1001] = \"BROWSER_TAB_CLOSE\";\n    ESocketCloseCode[ESocketCloseCode[\"GOING_AWAY\"] = 4001] = \"GOING_AWAY\";\n    ESocketCloseCode[ESocketCloseCode[\"CONNECTION_EXPIRED\"] = 4002] = \"CONNECTION_EXPIRED\";\n    ESocketCloseCode[ESocketCloseCode[\"CONNECTION_ERROR\"] = 4006] = \"CONNECTION_ERROR\";\n    ESocketCloseCode[ESocketCloseCode[\"ROOM_CLOSED\"] = 4007] = \"ROOM_CLOSED\";\n    ESocketCloseCode[ESocketCloseCode[\"ROOM_ENTRY_DENIED\"] = 4008] = \"ROOM_ENTRY_DENIED\";\n    ESocketCloseCode[ESocketCloseCode[\"KICKED\"] = 4009] = \"KICKED\";\n})(ESocketCloseCode || (exports.ESocketCloseCode = ESocketCloseCode = {}));\nexports.SocketCloseReason = {\n    [ESocketCloseCode.ROOM_CLOSED]: 'ROOM_CLOSED',\n    [ESocketCloseCode.ABNORMAL_CLOSURE]: 'ABNORMAL_CLOSURE',\n    [ESocketCloseCode.NORMAL_CLOSURE]: 'NORMAL_CLOSURE',\n    [ESocketCloseCode.BROWSER_TAB_CLOSE]: 'BROWSER_TAB_CLOSE',\n    [ESocketCloseCode.GOING_AWAY]: 'GOING_AWAY',\n    [ESocketCloseCode.CONNECTION_ERROR]: 'CONNECTION_ERROR',\n    [ESocketCloseCode.CONNECTION_EXPIRED]: 'CONNECTION_EXPIRED',\n    [ESocketCloseCode.ROOM_ENTRY_DENIED]: 'ROOM_ENTRY_DENIED',\n    [ESocketCloseCode.KICKED]: 'KICKED',\n};\n","import { ClientToSushiEvents } from 'types/dist/clientToSushiEvents.types';\nimport { mainLogger } from './logger';\nimport { SushiToClientEvents } from 'types/dist/sushiToClientEvents.types';\nimport { ESocketCloseCode, SocketCloseReason } from 'types/dist/socket.types';\nimport { EnhancedEventEmitter } from './common-js/EnhancedEventEmitter';\nimport { ConnectionState } from './types';\nimport { GeolocationSchema } from './validators';\nconst logger = mainLogger.createSubLogger('Socket.ts');\n\nexport type SocketEvents = {\n  uninitialized: [];\n  connecting: [];\n  connected: [];\n  failed: [];\n  closed: [code: ESocketCloseCode];\n  reconnecting: [];\n  reconnected: [];\n  'region-updated': [region: string];\n  'token-updated': [token: string | null];\n};\n\nexport type MessagePayload<T = SushiToClientEvents> = {\n  event: keyof T;\n  data: Parameters<SushiToClientEvents[keyof SushiToClientEvents]>[0];\n};\n\n/**\n * Handles the underluying socket connection with the socket server\n */\nclass Socket<\n  T = SushiToClientEvents,\n> extends EnhancedEventEmitter<SocketEvents> {\n  /**\n   * Socket Instance, Singleton class\n   */\n  private static __instance: Socket | null = null;\n\n  /**\n   * Retry count for the socket connection, if the connection is closed abnormally, we try to reconnect 5 times\n   */\n  private __retryCount = 0;\n\n  /**\n   * Current connection state of the socket connection\n   */\n  private __connectionState: ConnectionState = 'uninitialized';\n\n  /**\n   * Underlying WebSocket connection, until we dont call Socket.connect(); this will be null\n   */\n  private __ws: WebSocket | null = null;\n\n  /**\n   * Map of all the subscribed events/topics for the socket connection\n   */\n  private __subscribedMap: Map<keyof T, unknown> = new Map();\n\n  /**\n   * Region of the current socket connection, specific to the Local Peer who joined the meeting\n   */\n  private __region: string | null = null;\n\n  /**\n   * Endpoint of the socket server, this is fetched from the API server\n   */\n  private __ENDPOINT: string | null = null;\n\n  /**\n   * Flag to enable local development\n   */\n  private isLocalDev = false;\n\n  /**\n   * Token of the current socket connection, specific to the Local Peer who joined the meeting\n   */\n  public token: string | null = null;\n\n  /**\n   * Returns the underlying WebSocket connection, throws an error if the connection is not initialized\n   * @throws `Error` if the connection is not initialized\n   */\n  get ws() {\n    if (!this.__ws) {\n      throw new Error('🔴 Socket Not Initialised');\n    }\n    return this.__ws;\n  }\n\n  /**\n   * Getter for the region of the current socket connection\n   */\n  get region() {\n    return this.__region;\n  }\n\n  /**\n   * Returns the current connection state of the socket connection\n   */\n  get connectionState(): ConnectionState {\n    return this.__connectionState;\n  }\n\n  /**\n   * Returns true if the socket connection is connected\n   */\n  get connected() {\n    return this.ws.OPEN === 1 && this.connectionState === 'connected';\n  }\n\n  /**\n   * Returns true if the socket connection is connecting\n   */\n  get connecting() {\n    return this.ws.CONNECTING === 0 && this.connectionState === 'connecting';\n  }\n\n  /**\n   * Returns true if the socket connection is closed\n   */\n  get closed() {\n    return this.ws.CLOSED === 3 || this.ws.CLOSING === 2;\n  }\n\n  /**\n   * Sets the current connection state of the socket connection\n   */\n  set connectionState(state: ConnectionState) {\n    logger.info(`Connection state changed to ${state}`);\n\n    this.__connectionState = state;\n  }\n\n  /**\n   * Update the token for this socket\n   * @throws `Error` if the token is already set\n   */\n\n  public setToken(token: string) {\n    if (this.token) {\n      throw new Error('🔴 Token Already Set');\n    }\n\n    this.token = token;\n\n    this.emit('token-updated', token);\n  }\n\n  /**\n   * Set a new region for the socket connection\n   */\n  public setRegion(region: string) {\n    this.__region = region;\n\n    this.emit('region-updated', region);\n  }\n\n  /**\n   * Creates the socket and returns the instance of the socket if already initialized\n   * you need to call connect method to connect to the server\n   * @param data\n   * @returns\n   */\n  public static create() {\n    if (!this.__instance) {\n      this.__instance = new Socket();\n    }\n\n    return this.__instance;\n  }\n\n  /**\n   * Returns the instance of the socket connection, throws an error if the connection is not initialized\n   * @throws `Error` if the connection is not initialized\n   */\n  public static getInstance() {\n    if (!Socket.__instance) {\n      throw new Error(\n        '🔴 Socket Instance Not Initialised, You are trying to do something which is not possible',\n      );\n    }\n\n    return Socket.__instance;\n  }\n\n  private constructor() {\n    super();\n  }\n\n  /**\n   *\n   */\n  private __getRegion = async () => {\n    const resp = await fetch(\n      'https://shinigami.huddle01.com/api/get-geolocation',\n    );\n\n    const data = await resp?.json();\n\n    const geolocationdata = GeolocationSchema.safeParse(data);\n\n    if (!geolocationdata.success) {\n      throw new Error('🔴 Error While Finding the Region to connect to');\n    }\n\n    const region = geolocationdata.data.globalRegion;\n\n    return region;\n  };\n\n  public enableLocalDev = () => {\n    this.isLocalDev = true;\n  };\n\n  /**\n   * Connect to the socket server using the token\n   * @param data - `{ token: string }`\n   */\n  public connect = async (data: { token: string }): Promise<\n    Socket<SushiToClientEvents>\n  > => {\n    if (!Socket.__instance) {\n      throw new Error('🔴 Socket Instance Not Initialised');\n    }\n    if (!this.token) {\n      this.setToken(data.token);\n    }\n\n    if (this.connectionState === 'connected') {\n      logger.error('🔴 Socket Already Connected');\n\n      return Socket.__instance;\n    }\n\n    if (this.connectionState === 'connecting') {\n      logger.error('🔴 Socket Connecting');\n\n      return Socket.__instance;\n    }\n\n    if (this.__ws) {\n      logger.error('🔴 Socket Already Initialized');\n\n      return Socket.__instance;\n    }\n\n    logger.info('🔌 Connecting to the socket server');\n\n    if (this.connectionState === 'awaiting-reconnection') {\n      logger.info(\n        '🔌 Socket connection was awaiting reconnection , creating a new socket connection',\n      );\n\n      this.emit('reconnecting');\n    }\n\n    if (!this.__region) {\n      const region = await this.__getRegion();\n\n      this.__region = region;\n    }\n\n    const url = await this.__getConfigUrl(data.token, this.__region);\n\n    this.__ws = new WebSocket(url);\n\n    this.__ws.onerror = (ev) => {\n      logger.error(ev);\n    };\n\n    this.connectionState = 'connecting';\n    this.emit('connecting');\n\n    this.__ws.addEventListener('message', this.__handleIncomingMessage);\n\n    this.__registerSocketEvents(this.ws);\n\n    this.__ws.onclose = async (ev) => {\n      logger.info('🔔 Socket connection closed', ev);\n\n      if (ev.code === ESocketCloseCode.ABNORMAL_CLOSURE) {\n        logger.info(\n          '🔔 Socket connection closed abnormally, Trying to Reconnect',\n        );\n        if (this.__retryCount < 7) {\n          const delay = 2 ** this.__retryCount * 1000;\n\n          setTimeout(async () => {\n            if (this.token) {\n              try {\n                await this.connect({ token: this.token });\n\n                this.emit('reconnected');\n\n                this.__retryCount = 0;\n              } catch (err) {\n                logger.error(\n                  `Reconnection Attempt ${this.__retryCount} failed`,\n                );\n              }\n            }\n          }, Math.min(delay, 20000));\n          this.__retryCount++;\n        } else {\n          logger.error(\n            '🔴 Socket connection closed abnormally, reconnecting failed',\n          );\n          this.close(ESocketCloseCode.CONNECTION_EXPIRED);\n        }\n      }\n    };\n\n    const socketConnectionPromise = new Promise<void>((resolve, reject) => {\n      const handleSuccess = () => {\n        logger.info('✅ Socket Connection Established');\n        handleRemoveListeners();\n        resolve();\n      };\n      const handleError = () => {\n        logger.error('🔴 Error While Connecting to the Socket');\n\n        handleRemoveListeners();\n\n        reject(new Error('❌ Socket Connection Failed'));\n      };\n\n      const handleRemoveListeners = () => {\n        this.off('connected', handleSuccess);\n        this.off('failed', handleError);\n      };\n\n      this.once('connected', handleSuccess);\n      this.once('failed', handleError);\n    });\n\n    await socketConnectionPromise;\n\n    return Socket.__instance;\n  };\n\n  /**\n   * Closes the underlying socket connection, and clears all the event listeners and subscriptions to events as well as\n   * any other information related to the connection.\n   * @param code `{ ESocketCloseCode }`\n   */\n  public close = (code: ESocketCloseCode) => {\n    this.ws.removeEventListener('message', this.__handleIncomingMessage);\n\n    const reason = SocketCloseReason[code];\n\n    logger.info(`🔌 Closing the connection, ${code} ${reason}`);\n\n    if ((code >= 3000 && code <= 4999) || code === 1000) {\n      this.ws.close(code, reason);\n\n      this.token = null;\n\n      this.__ENDPOINT = null;\n\n      this.emit('token-updated', null);\n    } else {\n      this.ws.close();\n    }\n\n    this.__unregisterSocketEvents(this.ws);\n\n    this.__ws = null;\n\n    if (code === 1006) {\n      // attempt to reconnect\n      this.connectionState = 'awaiting-reconnection';\n      logger.info('🔌 Socket Connection closed abnormally, reconnecting');\n\n      return;\n    }\n\n    this.connectionState = 'closed';\n\n    this.emit('closed', code);\n\n    logger.info('🔌 Socket Connection closed');\n  };\n\n  /**\n   * Publish a message to the server using the socket connection based on some events/topics\n   */\n  public publish = <P extends keyof ClientToSushiEvents>(\n    event: P,\n    data: Parameters<ClientToSushiEvents[P]>[0],\n  ) => {\n    const payload = JSON.stringify({\n      event,\n      data: data || {},\n    });\n\n    this.ws.send(payload);\n  };\n\n  /**\n   * Subscribe to a specific event/topic from the server\n   */\n  public subscribe = <K extends keyof T, P extends T[K]>(event: K, fn: P) => {\n    if (this.__subscribedMap.has(event)) {\n      logger.warn('⚠️ Overriding existing event handler');\n    }\n\n    this.__subscribedMap.set(event, fn);\n  };\n\n  /**\n   * Get the config url for the socket connection based on the token and region\n   * @param token Local Peer specific meeting token\n   * @param region Local Peer specific region\n   * @returns\n   */\n  private async __getConfigUrl(token: string, region: string) {\n    if (this.__ENDPOINT) {\n      return this.__ENDPOINT;\n    }\n\n    const apiServerUrl = this.isLocalDev\n      ? 'http://localhost:8000/api/v1'\n      : 'https://apira.huddle01.com/api/v1';\n\n    const res = await fetch(`${apiServerUrl}/getSushiUrl`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!res.ok) {\n      throw new Error('🔴 Error While Fetching the Url');\n    }\n\n    const { url } = (await res.json()) as { url: string };\n\n    this.__ENDPOINT = url\n      .replace('https://', 'wss://')\n      .replace('http://', 'ws://');\n\n    const wssAddress = `${this.__ENDPOINT}/ws`;\n\n    const wsAddress = `${wssAddress}?${[\n      `token=${token}`,\n      `version=${2}`,\n      `region=${region}`,\n    ].join('&')}`;\n\n    this.__ENDPOINT = wsAddress;\n\n    return wsAddress;\n  }\n\n  /**\n   * !Important\n   * Handle the incoming message from the server based on the events received from the server and call the subscribed event handler\n   */\n  private __handleIncomingMessage = (event: MessageEvent) => {\n    const { event: eventName, data } = JSON.parse(event.data) as {\n      event: keyof T;\n      data: unknown;\n    };\n\n    logger.info('📨 Incoming message event name: ', eventName);\n\n    const fn = this.__subscribedMap.get(eventName);\n\n    if (fn) {\n      (fn as (data: unknown) => void)(data);\n    }\n  };\n\n  private __handleSocketError = (ev: Event) => {\n    logger.error('Socket connection error', ev);\n\n    this.connectionState = 'failed';\n\n    this.emit('failed');\n  };\n\n  /**\n   * @description Handle the socket close event which is sent by the server\n   * @param ev CloseEvent\n   */\n  private __handleSocketClose = (ev: CloseEvent) => {\n    logger.info('Socket connection closed', ev);\n\n    const code = ev.code as ESocketCloseCode;\n\n    const reason = SocketCloseReason[code];\n\n    logger.info(`🔴 { Server }: Closing the connection, ${code} ${reason}`);\n\n    this.close(code);\n  };\n\n  /**\n   * @description Handle the socket open event which is sent after the connection is established with the server\n   * @param ev Event\n   */\n  private __handleSocketOpen = (ev: Event) => {\n    logger.info('Socket Connection Open', ev);\n\n    this.connectionState = 'connected';\n    this.emit('connected');\n  };\n\n  /**\n   * @description Register the socket events\n   * @param ws WebSocket\n   */\n  private __registerSocketEvents = (ws: WebSocket) => {\n    ws.addEventListener('error', this.__handleSocketError);\n    ws.addEventListener('close', this.__handleSocketClose);\n    ws.addEventListener('open', this.__handleSocketOpen);\n  };\n\n  /**\n   * @description Unregister the socket events\n   * @param ws WebSocket\n   */\n  private __unregisterSocketEvents = (ws: WebSocket) => {\n    ws.removeEventListener('error', this.__handleSocketError);\n    ws.removeEventListener('close', this.__handleSocketClose);\n    ws.removeEventListener('open', this.__handleSocketOpen);\n  };\n}\n\nexport default Socket;\n"],"mappings":"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","names":["ESocketCloseCode"]}