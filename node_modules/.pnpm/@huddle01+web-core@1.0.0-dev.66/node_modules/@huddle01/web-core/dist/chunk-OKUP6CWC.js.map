{"version":3,"sources":["../src/Transport.ts"],"sourcesContent":["import * as mediasoup from 'mediasoup-client';\n\nimport { EnhancedEventEmitter } from './common-js/EnhancedEventEmitter';\n\nimport { TSDPInfo } from 'types/dist/common.types';\nimport { TTransportType } from 'types/dist';\n\nimport type {\n  AppData,\n  TransportOptions,\n  Producer,\n  ConnectionState,\n  DataProducer,\n  DataConsumer,\n} from 'mediasoup-client/lib/types';\n\nimport { mainLogger } from './logger';\nimport Socket from './Socket';\nimport Consumer from './Consumer';\nimport { getMediaStreamKind, getMediaTrack } from './helpers';\nimport {\n  TConsumeResponseData,\n  TConsumeDataResponseData,\n} from 'types/dist/mq/response.types';\nimport {\n  codecOptionsViaKind,\n  encodingViaMediaType,\n} from './constants/rtpConstants';\nimport { EnhancedMap } from './common-js/EnhancedMap';\n\nconst logger = mainLogger.createSubLogger('Transport');\n\nexport type TransportEvents = {\n  connectTransportResponse: [];\n};\n\nclass Transport extends EnhancedEventEmitter<TransportEvents> {\n  /**\n   * Peer Id, which handles the peer id.\n   */\n  public readonly peerId: string;\n\n  /**\n   *  MediaSoup Device Instance, which handles the browsers or mobile device init.\n   */\n  private __device: mediasoup.Device;\n\n  /**\n   * MediaSoup Transport Instance, which handles the media transport.\n   */\n  private __mediasoupTransport: mediasoup.types.Transport;\n\n  /**\n   * Socket Instance, which handles the socket connection.\n   */\n  private readonly __socket: Socket;\n\n  /**\n   * Map of Producers, which handles the producers. ( Sending out Media Streams )\n   *\n   * `Mapped with {producerId => Producer}`\n   */\n  private readonly __producers: Map<string, Producer> = new Map();\n\n  /**\n   * Map of DataProducers, which handles the dataProducers. ( Sending out Data )\n   *\n   * `Mapped with {label => DataProducer}`\n   */\n  private readonly __dataProducers: Map<string, DataProducer> = new Map();\n\n  /**\n   * Map of DataConsumers, which handles the dataConsumers. ( Receiving Media Streams )\n   *\n   * `Mapped with {label:label => DataConsumer}`\n   */\n  private readonly __dataConsumers: Map<string, DataConsumer> = new Map();\n\n  /**\n   * Map of Consumers, which handles the consumers. ( Receiving Media Streams )\n   *\n   * `Mapped with {label:RemotePeerId => Consumer}`\n   */\n  private readonly __consumers: EnhancedMap<Consumer> = new EnhancedMap({});\n\n  /**\n   * Map of Identifiers to Producer Ids, which handles the mapping of identifiers to producer ids.\n   *\n   * `identifiers` are the unique identifiers for the stream, which is used to identify the stream.\n   */\n  public readonly labelToProducerId: Map<string, string> = new Map();\n\n  /**\n   * Transport Type, which handles the transport type. ( `send | recv` )\n   */\n  public readonly transportType: TTransportType;\n\n  /**\n   * Pending Producer Tasks, which handles the pending producer tasks.\n   * callback function is necessary to be called when the producer is created\n   * on the server as well as on the client side.\n   */\n  private __pendingProducerTasks: Map<\n    string,\n    ({\n      id,\n    }: {\n      id: string;\n    }) => void\n  > = new Map();\n\n  /**\n   * Debounce to handle concurrent request to restart Ice. Waits for some time before sending\n   * more requests to restart ice.\n   */\n  private __iceRestartDebounce = false;\n\n  public get device() {\n    return this.__device;\n  }\n\n  public get mediasoupTransport() {\n    return this.__mediasoupTransport;\n  }\n\n  public get connectionState() {\n    return this.__mediasoupTransport.connectionState;\n  }\n\n  public get producers() {\n    return this.__producers;\n  }\n\n  public get dataProducers() {\n    return this.__dataProducers;\n  }\n\n  public get dataConsumers() {\n    return this.__dataConsumers;\n  }\n\n  public get consumers() {\n    return this.__consumers;\n  }\n\n  public getProducerById(producerId: string): Producer {\n    const producer = this.__producers.get(producerId);\n\n    if (!producer) throw new Error('Producer not found');\n\n    return producer;\n  }\n\n  public removeProducerById(producerId: string) {\n    logger.info(`🔔 Removing Producer, id: ${producerId}`);\n\n    return this.__producers.delete(producerId);\n  }\n\n  /**\n   * Get the consumer by label and peerId\n   * @param data\n   * @returns Consumer | null; Returns null if consumer is not found\n   */\n  public getConsumer = (data: {\n    label: string;\n    peerId: string;\n  }): Consumer | null => {\n    const consumer = this.__consumers.get(data.label, data.peerId);\n\n    if (!consumer) return null;\n\n    return consumer;\n  };\n\n  public get transport(): mediasoup.types.Transport {\n    const transport = this.__mediasoupTransport;\n\n    if (!transport) throw new Error('Transport Not Initialized');\n\n    return transport;\n  }\n\n  public addPendingProducerTask = (data: {\n    label: string;\n    peerId: string;\n\n    callback: ({\n      id,\n    }: {\n      id: string;\n    }) => void;\n  }) => {\n    const key = `${data.peerId}-${data.label}`;\n\n    logger.info('🔔 Adding Pending Producer Task, key', key);\n\n    if (this.__pendingProducerTasks.has(key)) {\n      logger.debug('🔴 Producer Creation is Pending for key: ', key);\n\n      return;\n    }\n\n    this.__pendingProducerTasks.set(key, data.callback);\n  };\n\n  public resolvePendingProducerTask = (data: {\n    label: string;\n    peerId: string;\n    id: string;\n  }) => {\n    const key = `${data.peerId}-${data.label}`;\n\n    logger.info('🔔 Resolving Pending Producer Task, key', key);\n\n    const callback = this.__pendingProducerTasks.get(key);\n\n    if (!callback) {\n      logger.error('🔴 Producer Creation is not Pending for key: ', key);\n\n      return;\n    }\n\n    callback({ id: data.id });\n\n    this.__pendingProducerTasks.delete(key);\n  };\n\n  public static create = (data: {\n    peerId: string;\n    sdpInfo: TSDPInfo;\n    device: mediasoup.Device;\n    iceServers: RTCIceServer[];\n    transportType: TTransportType;\n    socket: Socket;\n  }) => {\n    try {\n      logger.info(\n        `🔔 Creating Client Side Transport, type: ${data.transportType}`,\n      );\n\n      const { transportType, device } = data;\n\n      const payload: TransportOptions = {\n        id: data.sdpInfo.id,\n        iceParameters: data.sdpInfo.iceParameters,\n        iceCandidates: data.sdpInfo.iceCandidates,\n        iceServers: data.iceServers,\n        dtlsParameters: data.sdpInfo.dtlsParameters,\n        sctpParameters: data.sdpInfo.sctpParameters,\n        proprietaryConstraints: {},\n        appData: {},\n      };\n\n      const mediasoupTransport =\n        transportType === 'send'\n          ? device.createSendTransport(payload)\n          : device.createRecvTransport(payload);\n\n      const transport = new Transport({\n        peerId: data.peerId,\n        device: data.device,\n        transportType: data.transportType,\n        mediasoupTransport,\n      });\n\n      return transport;\n    } catch (error) {\n      logger.error(`❌ Transport.create(), type: ${data.transportType}`);\n      logger.error(error);\n\n      throw error;\n    }\n  };\n\n  private constructor(data: {\n    peerId: string;\n    device: mediasoup.Device;\n    transportType: TTransportType;\n    mediasoupTransport: mediasoup.types.Transport;\n  }) {\n    super();\n\n    this.__socket = Socket.getInstance();\n\n    this.__device = data.device;\n\n    this.transportType = data.transportType;\n\n    this.__mediasoupTransport = data.mediasoupTransport;\n\n    this.__mediasoupTransport.on('connectionstatechange', (state) => {\n      this.__connectionStateChangeHandler(state);\n    });\n\n    this.peerId = data.peerId;\n\n    this.__listenTransportConnect();\n\n    this.__listenTransportProduce();\n\n    if (this.transportType === 'send') this.__listenTransportDataProduce();\n\n    logger.info(`✅ ${data.transportType} Transport Initialized`);\n  }\n\n  private __listenTransportConnect = () => {\n    this.__mediasoupTransport.on(\n      'connect',\n      ({ dtlsParameters }, callback, errback) => {\n        logger.info('🔔 Transport Connect Event Called');\n\n        try {\n          this.once('connectTransportResponse', () => {\n            callback();\n          });\n\n          this.__socket.publish('connectTransport', {\n            dtlsParameters,\n            transportType: this.transportType,\n          });\n        } catch (error) {\n          logger.error('❌ Error Transport Connect Event');\n          logger.error(error);\n          errback(error as Error);\n        }\n      },\n    );\n  };\n\n  private __listenTransportProduce = () => {\n    this.__mediasoupTransport.on(\n      'produce',\n      async ({ kind, rtpParameters, appData }, callback, errback) => {\n        logger.info(`🔔 ${this.transportType} Produce Event Called`);\n\n        try {\n          const label = appData?.label as string;\n\n          if (!label) throw new Error('🔴 Stream Identifier Not Found');\n\n          this.__socket.publish('produce', {\n            createProducerData: {\n              rtpParameters,\n              kind,\n              label,\n              appData,\n              paused: false,\n            },\n          });\n\n          this.addPendingProducerTask({\n            peerId: this.peerId,\n            label,\n            callback,\n          });\n        } catch (error) {\n          logger.error('❌ Error Transport Produce Event');\n          logger.error(error);\n          errback(error as Error);\n        }\n      },\n    );\n  };\n\n  private __listenTransportDataProduce = () => {\n    logger.info(`🔔 producedata: ${this.transportType} `);\n\n    this.__mediasoupTransport.on(\n      'producedata',\n      async (\n        { label, appData, sctpStreamParameters, protocol },\n        callback,\n        errback,\n      ) => {\n        logger.info(`🔔 ${this.transportType} Produce Data Event Called`);\n        try {\n          this.__socket.publish('produceData', {\n            createDataProducerData: {\n              transportId: this.__mediasoupTransport.id,\n              sctpStreamParameters,\n              label: label as string,\n              protocol,\n              appData: appData as Record<string, string>,\n            },\n          });\n\n          this.addPendingProducerTask({\n            peerId: this.peerId,\n            label: label as string,\n            callback,\n          });\n\n          // this.__socket.subscribe('produceDataResponse', (data) => {\n          //   logger.info('🔔 Produce Data Response Received');\n          //   callback({ id: data.dataProducerId });\n          // });\n        } catch (error) {\n          logger.error('❌ Error Transport Produce Data Event');\n          logger.error(error);\n          errback(error as Error);\n        }\n      },\n    );\n  };\n\n  public produce = async (data: {\n    stream: MediaStream;\n    label: string;\n    stopTrackOnClose: boolean;\n    appData?: AppData;\n  }) => {\n    const kind = getMediaStreamKind(data.stream);\n\n    const track = getMediaTrack({ stream: data.stream, kind });\n\n    logger.info(`🔔 Produce Called for kind: ${kind}, label: ${data.label}`);\n\n    try {\n      if (!this.__device.loaded) {\n        throw new Error('Device Not Loaded');\n      }\n\n      if (!this.__device.rtpCapabilities.codecs) {\n        throw new Error('No Codecs Found');\n      }\n\n      if (!this.__device.canProduce(kind)) {\n        throw new Error(`Device Cannot produce ${kind}`);\n      }\n\n      if (this.transportType !== 'send') {\n        throw new Error(`Cannot produce on ${this.transportType} transport`);\n      }\n\n      const codecs = this.__device.rtpCapabilities?.codecs;\n      if (!codecs) {\n        throw new Error('❌ Device RTP Capabilities not found');\n      }\n\n      const codecViaMediaType = {\n        video: codecs.find(\n          (codec) => codec.mimeType.toLowerCase() === 'video/h264',\n        ),\n        'screen-share-video': codecs.find(\n          (codec) => codec.mimeType.toLowerCase() === 'video/h264',\n        ),\n        audio: undefined,\n      };\n\n      const mediaType =\n        data.label === 'screen-share-video' ? 'screen-share-video' : kind;\n      const mediasoupProducer = await this.__mediasoupTransport.produce({\n        track: track,\n        encodings: encodingViaMediaType[mediaType],\n        codecOptions: codecOptionsViaKind[kind],\n        codec: codecViaMediaType[mediaType],\n        stopTracks: data.stopTrackOnClose,\n        zeroRtpOnPause: true,\n        disableTrackOnPause: true,\n        appData: {\n          ...data.appData,\n          producerPeerId: this.peerId,\n        },\n      });\n\n      this.__producers.set(mediasoupProducer.id, mediasoupProducer);\n\n      this.labelToProducerId.set(data.label, mediasoupProducer.id);\n\n      logger.info(`🔔 Producer Created sucessfully with label : ${data.label}`);\n\n      return mediasoupProducer;\n    } catch (error) {\n      logger.error('❌ Error Transport Produce Event');\n      logger.error(error);\n\n      throw error;\n    }\n  };\n\n  public produceData = async (data: {\n    label: string;\n    appData?: AppData;\n  }) => {\n    logger.info(`🔔 Produce Data Called for label: ${data.label}`);\n\n    try {\n      if (this.transportType !== 'send') {\n        throw new Error(`Cannot produce on ${this.transportType} transport`);\n      }\n\n      const dataProducer = await this.__mediasoupTransport.produceData({\n        label: data.label,\n        appData: {\n          ordered: true,\n          ...data.appData,\n          producerPeerId: this.peerId,\n          label: data.label,\n        },\n      });\n\n      this.__dataProducers.set(dataProducer.label, dataProducer);\n\n      return dataProducer;\n    } catch (error) {\n      logger.error('❌ Error Transport Produce Data Event');\n      logger.error(error);\n\n      throw error;\n    }\n  };\n\n  public consume = async (data: TConsumeResponseData) => {\n    const { label, producerPeerId, kind } = data;\n\n    logger.info(\n      `🔔 Consume Called for ${kind} from remote peer ${producerPeerId}`,\n    );\n    try {\n      if (this.transportType !== 'recv') {\n        throw new Error(`Cannot consume on ${this.transportType} transport`);\n      }\n\n      const consumer = Consumer.create({\n        producerId: data.producerId,\n        producerPeerId,\n        label,\n      });\n\n      if (!this.__device.loaded) {\n        throw new Error('Device Not Loaded');\n      }\n\n      if (!this.__device.rtpCapabilities.codecs) {\n        throw new Error('No Codecs Found');\n      }\n\n      const mediaSoupConsumer = await this.__mediasoupTransport.consume({\n        id: data.consumerId,\n        rtpParameters: data.rtpParameters,\n        kind: data.kind,\n        producerId: data.producerId,\n        appData: data.appData,\n      });\n\n      mediaSoupConsumer.on('transportclose', () => {\n        this.closeConsumer({ label, peerId: producerPeerId });\n      });\n\n      mediaSoupConsumer.on('trackended', () => {\n        this.closeConsumer({ label, peerId: producerPeerId });\n      });\n\n      this.__consumers.set(consumer.label, consumer.producerPeerId, consumer);\n\n      consumer.setMediaSoupConsumer(mediaSoupConsumer);\n\n      return { consumer, mediaSoupConsumer };\n    } catch (error) {\n      logger.error(error);\n\n      throw new Error('❌ Error calling consume()');\n    }\n  };\n  public consumeData = async (data: TConsumeDataResponseData) => {\n    const {\n      label,\n      appData,\n      dataProducerId,\n      protocol,\n      id,\n      peerId,\n      sctpStreamParameters,\n    } = data;\n\n    logger.info(\n      `🔔 ConsumeData from producer ${peerId} consumerIdFromServer:${id}`,\n    );\n    try {\n      if (this.transportType !== 'recv') {\n        throw new Error(`Cannot consume on ${this.transportType} transport`);\n      }\n\n      if (!this.__device.loaded) {\n        throw new Error('Device Not Loaded');\n      }\n\n      if (!this.__device.rtpCapabilities.codecs) {\n        throw new Error('No Codecs Found');\n      }\n\n      const dataConsumer = await this.transport.consumeData({\n        id,\n        dataProducerId,\n        sctpStreamParameters,\n        label,\n        protocol,\n        appData,\n      });\n\n      dataConsumer.on('open', () => {\n        logger.info(`✅ DataConsumer with ${label} opened`);\n      });\n\n      dataConsumer.on('close', () => {\n        logger.warn(`✅ DataConsumer with ${label} closed`);\n\n        this.__dataConsumers.delete(label);\n      });\n\n      dataConsumer.on('error', (error) => {\n        logger.error(`✅ DataConsumer \"error\": ${error} closed`);\n      });\n\n      this.__dataConsumers.set(label, dataConsumer);\n\n      return dataConsumer;\n    } catch (error) {\n      logger.error(error);\n\n      throw new Error('❌ Error calling consumeData()');\n    }\n  };\n\n  public closeConsumer = (data: { label: string; peerId: string }) => {\n    try {\n      const consumer = this.getConsumer(data);\n\n      if (!consumer) {\n        throw new Error(\n          `❌ Consumer not found label: ${data.label}, peerId: ${data.peerId}`,\n        );\n      }\n\n      consumer.close();\n\n      this.__consumers.delete(data.label, data.peerId);\n    } catch (error) {\n      logger.error('❌ Error closing consumer');\n      logger.error(error);\n    }\n  };\n\n  public close = async (data: { retries: number }) => {\n    try {\n      if (data.retries <= 0) {\n        logger.error('❌ Error closing transport, max retries exceeded');\n        return;\n      }\n\n      logger.info(`🔔 Closing ${this.transportType} transport`);\n\n      this.__mediasoupTransport.close();\n\n      logger.info(`✅ ${this.transportType} transport closed`);\n    } catch (error) {\n      logger.error('❌ Error closing transport');\n      logger.error(error);\n      logger.error('Retrying...');\n\n      this.close({ retries: data.retries - 1 });\n    }\n  };\n  private __connectionStateChangeHandler = (state: ConnectionState) => {\n    try {\n      logger.debug(\n        `🔔 ${this.transportType} Transport Connection State Changed, state: ${state}`,\n      );\n      const transportType = this.transportType;\n      const handler: Record<ConnectionState, () => void> = {\n        connected: () => {\n          logger.debug(`🔔 ${this.transportType} Transport Connected`);\n        },\n        disconnected: () => {\n          if (this.__iceRestartDebounce) return;\n\n          this.__iceRestartDebounce = true;\n\n          this.__socket.publish('restartTransportIce', {\n            transportId: this.__mediasoupTransport.id,\n            transportType,\n          });\n\n          setTimeout(() => {\n            this.__iceRestartDebounce = false;\n          }, 3000);\n          logger.debug(`🔔 ${transportType} Transport Disconnected`);\n        },\n        failed: () => {\n          logger.debug(`🔔 ${transportType} Transport Failed`);\n        },\n        connecting: () => {\n          logger.debug(`🔔 ${transportType} Transport Connecting`);\n        },\n        closed: () => {\n          logger.debug(`🔔 ${transportType} Transport closed`);\n        },\n        new: () => {\n          logger.debug(`🔔 ${transportType} Transport new`);\n        },\n      };\n\n      handler[state]();\n    } catch (err) {\n      logger.error('❌ Error in connectionStateChangeHandler');\n      logger.error(err);\n    }\n  };\n}\n\nexport default Transport;\n"],"mappings":"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","names":[]}