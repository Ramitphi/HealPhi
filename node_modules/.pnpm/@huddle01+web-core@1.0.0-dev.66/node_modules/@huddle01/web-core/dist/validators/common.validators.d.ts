import { z } from 'zod';

declare const ConnectionParameterSchema: z.ZodObject<{
    roomId: z.ZodString;
    token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    roomId: string;
    token: string;
}, {
    roomId: string;
    token: string;
}>;
declare const GeolocationSchema: z.ZodObject<{
    country: z.ZodString;
    latitude: z.ZodString;
    longitude: z.ZodString;
    region: z.ZodString;
    globalRegion: z.ZodString;
    ip: z.ZodString;
}, "strip", z.ZodTypeAny, {
    country: string;
    latitude: string;
    longitude: string;
    region: string;
    globalRegion: string;
    ip: string;
}, {
    country: string;
    latitude: string;
    longitude: string;
    region: string;
    globalRegion: string;
    ip: string;
}>;
declare const VolatileDataMessageSchema: z.ZodObject<{
    from: z.ZodString;
    payload: z.ZodUnknown;
    label: z.ZodOptional<z.ZodString>;
    to: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodArray<z.ZodString, "many">]>>;
}, "strip", z.ZodTypeAny, {
    from: string;
    payload?: unknown;
    label?: string | undefined;
    to?: string[] | "*" | undefined;
}, {
    from: string;
    payload?: unknown;
    label?: string | undefined;
    to?: string[] | "*" | undefined;
}>;
declare const DataMessageSchema: z.ZodObject<{
    from: z.ZodString;
    payload: z.ZodString;
    label: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    from: string;
    payload: string;
    label?: string | undefined;
}, {
    from: string;
    payload: string;
    label?: string | undefined;
}>;
type IConnectionParameter = z.infer<typeof ConnectionParameterSchema>;

export { ConnectionParameterSchema, DataMessageSchema, GeolocationSchema, IConnectionParameter, VolatileDataMessageSchema };
