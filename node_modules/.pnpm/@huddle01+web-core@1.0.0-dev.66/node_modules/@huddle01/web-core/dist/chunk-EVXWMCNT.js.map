{"version":3,"sources":["../src/logger.ts"],"sourcesContent":["export type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'silent';\n\nexport interface Logger {\n  // biome-ignore lint/suspicious/noExplicitAny: need any\n  trace(...args: any[]): void;\n  // biome-ignore lint/suspicious/noExplicitAny: need any\n  debug(...args: any[]): void;\n  // biome-ignore lint/suspicious/noExplicitAny: need any\n  info(...args: any[]): void;\n  // biome-ignore lint/suspicious/noExplicitAny: need any\n  warn(...args: any[]): void;\n  // biome-ignore lint/suspicious/noExplicitAny: need any\n  error(...args: any[]): void;\n}\n\nexport interface WrappedLogger extends Logger {\n  init(): void;\n  level: LogLevel | undefined;\n  logger: Logger;\n}\n\nexport type LoggerFactory = () => Logger;\n\nconst COLORS = {\n  black: '\\x1b[30m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  white: '\\x1b[37m',\n  default: '\\x1b[39m',\n};\n\nlet defaultLevel: LogLevel = 'debug';\nconst created = Date.now();\n\nfunction createDefaultLoggerFactory(): LoggerFactory {\n  return () => {\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    const trace = (...args: any[]) => {\n      /* eslint-disable no-debugger, no-console */\n      console.trace(...args);\n    };\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    const debug = (...args: any[]) => {\n      /* eslint-disable no-debugger, no-console */\n      console.debug(...args);\n    };\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    const info = (...args: any[]) => {\n      /* eslint-disable no-debugger, no-console */\n      console.info(...args);\n    };\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    const warn = (...args: any[]) => {\n      /* eslint-disable no-debugger, no-console */\n      console.warn(...args);\n    };\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    const error = (...args: any[]) => {\n      /* eslint-disable no-debugger, no-console */\n      console.error(...args);\n    };\n    return {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n    };\n  };\n}\n\nconst wrapLogger = (\n  logger: Logger,\n  moduleName: string,\n  logLevel?: LogLevel,\n) => {\n  let isTrace = false;\n  let isDebug = false;\n  let isInfo = false;\n  let isWarning = false;\n  let isError = false;\n\n  let _level = logLevel;\n  let _logger = logger;\n  const tracePrefix = `${COLORS.magenta}[TRACE]${COLORS.default} ${moduleName}`;\n  const debugPrefix = `${COLORS.cyan}[DEBUG]${COLORS.default} ${moduleName}`;\n  const infoPrefix = `${COLORS.green}[INFO]${COLORS.default} ${moduleName}`;\n  const warnPrefix = `${COLORS.yellow}[WARN]${COLORS.default} ${moduleName}`;\n  const errorPrefix = `${COLORS.red}[ERROR]${COLORS.default} ${moduleName}`;\n\n  const result = new (class implements WrappedLogger {\n    public init() {\n      isTrace = ['trace'].includes(_level ?? defaultLevel);\n      isDebug = ['trace', 'debug'].includes(_level ?? defaultLevel);\n      isInfo = ['trace', 'debug', 'info'].includes(_level ?? defaultLevel);\n      isWarning = ['trace', 'debug', 'info', 'warn'].includes(\n        _level ?? defaultLevel,\n      );\n      isError = ['trace', 'debug', 'info', 'warn', 'error'].includes(\n        _level ?? defaultLevel,\n      );\n    }\n    public get logger() {\n      return _logger;\n    }\n    public set logger(value: Logger) {\n      _logger = value;\n    }\n    public get level(): LogLevel | undefined {\n      return _level;\n    }\n    public set level(value: LogLevel | undefined) {\n      _level = value;\n    }\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    trace(...args: any[]): void {\n      if (isTrace) {\n        const elapsedInMs = `${COLORS.magenta}+${Date.now() - created}ms${\n          COLORS.default\n        }`;\n        logger.trace(tracePrefix, ...args, elapsedInMs);\n      }\n    }\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    debug(...args: any[]): void {\n      if (isDebug) {\n        const elapsedInMs = `${COLORS.magenta}+${Date.now() - created}ms${\n          COLORS.default\n        }`;\n        logger.debug(debugPrefix, ...args, elapsedInMs);\n      }\n    }\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    info(...args: any[]): void {\n      if (isInfo) {\n        const elapsedInMs = `${COLORS.magenta}+${Date.now() - created}ms${\n          COLORS.default\n        }`;\n        logger.info(infoPrefix, ...args, elapsedInMs);\n      }\n    }\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    warn(...args: any[]): void {\n      if (isWarning) {\n        const elapsedInMs = `${COLORS.magenta}+${Date.now() - created}ms${\n          COLORS.default\n        }`;\n        logger.warn(warnPrefix, ...args, elapsedInMs);\n      }\n    }\n    // biome-ignore lint/suspicious/noExplicitAny: need any\n    error(...args: any[]): void {\n      if (isError) {\n        const elapsedInMs = `${COLORS.magenta}+${Date.now() - created}ms${\n          COLORS.default\n        }`;\n        logger.error(errorPrefix, ...args, elapsedInMs);\n      }\n    }\n  })();\n  return result;\n};\n\nlet actualLoggerFactory: LoggerFactory = createDefaultLoggerFactory();\nconst loggers = new Map<string, WrappedLogger>();\n\nexport const createLogger = (moduleName: string, logLevel?: LogLevel) => {\n  let wrappedLogger = loggers.get(moduleName);\n  if (!wrappedLogger) {\n    const logger = actualLoggerFactory();\n    wrappedLogger = wrapLogger(logger, moduleName, logLevel ?? defaultLevel);\n    loggers.set(moduleName, wrappedLogger);\n  } else {\n    wrappedLogger.level = logLevel ?? defaultLevel;\n  }\n  wrappedLogger.init();\n  return wrappedLogger;\n};\n\nexport const setLogLevel = (level: LogLevel) => {\n  defaultLevel = level;\n  for (const [moduleName] of Array.from(loggers.entries())) {\n    loggers.set(moduleName, createLogger(moduleName, level));\n  }\n};\n\nexport const setLoggerFactory = (loggerFactory: LoggerFactory) => {\n  actualLoggerFactory = loggerFactory;\n  for (const [moduleName, logger] of Array.from(loggers.entries())) {\n    loggers.set(moduleName, createLogger(moduleName, logger.level));\n  }\n};\n\nexport const mainLogger = {\n  createSubLogger: (moduleName: string) => createLogger(`nezuko:${moduleName}`),\n};\n"],"mappings":"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","names":[]}