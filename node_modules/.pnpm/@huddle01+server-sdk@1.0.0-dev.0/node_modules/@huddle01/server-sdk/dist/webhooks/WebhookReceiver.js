"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookReceiver = void 0;
const node_crypto_1 = __importDefault(require("node:crypto"));
class WebhookReceiver {
    #config;
    constructor(config) {
        this.#config = config;
    }
    receive(
    // biome-ignore lint/suspicious/noExplicitAny: <explanation>
    body, header) {
        // Huddle01-Signature: t=36285904404,sha256=88f3ff0fds9sf8a98vb0b096e81507cfd5c932fc17cf63a4a55566fd38da3a2d3d2
        const timestamp = header?.split(',')[0]?.split('=')?.[1];
        const signature = header?.split(',')[1];
        if (!timestamp || !signature)
            throw new Error('Invalid headers');
        if (!body.id)
            throw new Error('Invalid body');
        // biome-ignore lint/suspicious/noExplicitAny: <explanation>
        let data;
        if (typeof body === 'string')
            data = JSON.parse(body);
        else if (typeof body === 'object')
            data = body;
        else
            throw new Error('Invalid body');
        const hashPayload = `${data.id}.${timestamp}.${JSON.stringify(data)}`;
        const signatureAlgorithm = signature.split('=')[0];
        if (!signatureAlgorithm)
            throw new Error('Invalid signature algorithm');
        const hmac = node_crypto_1.default.createHmac(signatureAlgorithm, this.#config.apiSecret);
        const digest = Buffer.from(`${signatureAlgorithm}=${hmac.update(hashPayload).digest('hex')}`, 'utf8');
        const providerSig = Buffer.from(signature, 'utf8');
        if (providerSig.length !== digest.length ||
            !node_crypto_1.default.timingSafeEqual(digest, providerSig)) {
            throw new Error('Invalid signature');
        }
        return data;
    }
    /**
     * Helper function to create a typed webhook data object
     */
    createTypedWebhookData(event, data) {
        return { event, data: data };
    }
}
exports.WebhookReceiver = WebhookReceiver;
