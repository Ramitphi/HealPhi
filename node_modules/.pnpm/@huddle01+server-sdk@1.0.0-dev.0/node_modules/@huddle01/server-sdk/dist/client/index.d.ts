import { z } from 'zod';
export declare const PermissionSchema: z.ZodObject<{
    admin: z.ZodBoolean;
    canConsume: z.ZodBoolean;
    canProduce: z.ZodBoolean;
    canProduceSources: z.ZodArray<z.ZodUnion<[z.ZodLiteral<"cam">, z.ZodLiteral<"mic">, z.ZodLiteral<"screen">]>, "many">;
    canSendData: z.ZodBoolean;
    canRecvData: z.ZodBoolean;
    canUpdateMetadata: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    admin: boolean;
    canConsume: boolean;
    canProduce: boolean;
    canProduceSources: ("cam" | "mic" | "screen")[];
    canSendData: boolean;
    canRecvData: boolean;
    canUpdateMetadata: boolean;
}, {
    admin: boolean;
    canConsume: boolean;
    canProduce: boolean;
    canProduceSources: ("cam" | "mic" | "screen")[];
    canSendData: boolean;
    canRecvData: boolean;
    canUpdateMetadata: boolean;
}>;
export declare const PeerDataSchema: z.ZodObject<{
    peerId: z.ZodString;
    permissions: z.ZodObject<{
        admin: z.ZodOptional<z.ZodBoolean>;
        canConsume: z.ZodOptional<z.ZodBoolean>;
        canProduce: z.ZodOptional<z.ZodBoolean>;
        canProduceSources: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"cam">, z.ZodLiteral<"mic">, z.ZodLiteral<"screen">]>, "many">>;
        canSendData: z.ZodOptional<z.ZodBoolean>;
        canRecvData: z.ZodOptional<z.ZodBoolean>;
        canUpdateMetadata: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        admin?: boolean | undefined;
        canConsume?: boolean | undefined;
        canProduce?: boolean | undefined;
        canProduceSources?: ("cam" | "mic" | "screen")[] | undefined;
        canSendData?: boolean | undefined;
        canRecvData?: boolean | undefined;
        canUpdateMetadata?: boolean | undefined;
    }, {
        admin?: boolean | undefined;
        canConsume?: boolean | undefined;
        canProduce?: boolean | undefined;
        canProduceSources?: ("cam" | "mic" | "screen")[] | undefined;
        canSendData?: boolean | undefined;
        canRecvData?: boolean | undefined;
        canUpdateMetadata?: boolean | undefined;
    }>;
    metadata: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    permissions: {
        admin?: boolean | undefined;
        canConsume?: boolean | undefined;
        canProduce?: boolean | undefined;
        canProduceSources?: ("cam" | "mic" | "screen")[] | undefined;
        canSendData?: boolean | undefined;
        canRecvData?: boolean | undefined;
        canUpdateMetadata?: boolean | undefined;
    };
    peerId: string;
    metadata?: string | undefined;
}, {
    permissions: {
        admin?: boolean | undefined;
        canConsume?: boolean | undefined;
        canProduce?: boolean | undefined;
        canProduceSources?: ("cam" | "mic" | "screen")[] | undefined;
        canSendData?: boolean | undefined;
        canRecvData?: boolean | undefined;
        canUpdateMetadata?: boolean | undefined;
    };
    peerId: string;
    metadata?: string | undefined;
}>;
export type PeerDataSchema = z.infer<typeof PeerDataSchema>;
declare const UpdatePeerPermissionSchema: z.ZodObject<{
    peerId: z.ZodString;
    roomId: z.ZodString;
    role: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"host">, z.ZodLiteral<"coHost">, z.ZodLiteral<"speaker">, z.ZodLiteral<"listener">, z.ZodLiteral<"guest">, z.ZodString]>>;
    permissions: z.ZodOptional<z.ZodObject<{
        admin: z.ZodOptional<z.ZodBoolean>;
        canConsume: z.ZodOptional<z.ZodBoolean>;
        canProduce: z.ZodOptional<z.ZodBoolean>;
        canProduceSources: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"cam">, z.ZodLiteral<"mic">, z.ZodLiteral<"screen">]>, "many">>;
        canSendData: z.ZodOptional<z.ZodBoolean>;
        canRecvData: z.ZodOptional<z.ZodBoolean>;
        canUpdateMetadata: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        admin?: boolean | undefined;
        canConsume?: boolean | undefined;
        canProduce?: boolean | undefined;
        canProduceSources?: ("cam" | "mic" | "screen")[] | undefined;
        canSendData?: boolean | undefined;
        canRecvData?: boolean | undefined;
        canUpdateMetadata?: boolean | undefined;
    }, {
        admin?: boolean | undefined;
        canConsume?: boolean | undefined;
        canProduce?: boolean | undefined;
        canProduceSources?: ("cam" | "mic" | "screen")[] | undefined;
        canSendData?: boolean | undefined;
        canRecvData?: boolean | undefined;
        canUpdateMetadata?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    peerId: string;
    roomId: string;
    role?: string | undefined;
    permissions?: {
        admin?: boolean | undefined;
        canConsume?: boolean | undefined;
        canProduce?: boolean | undefined;
        canProduceSources?: ("cam" | "mic" | "screen")[] | undefined;
        canSendData?: boolean | undefined;
        canRecvData?: boolean | undefined;
        canUpdateMetadata?: boolean | undefined;
    } | undefined;
}, {
    peerId: string;
    roomId: string;
    role?: string | undefined;
    permissions?: {
        admin?: boolean | undefined;
        canConsume?: boolean | undefined;
        canProduce?: boolean | undefined;
        canProduceSources?: ("cam" | "mic" | "screen")[] | undefined;
        canSendData?: boolean | undefined;
        canRecvData?: boolean | undefined;
        canUpdateMetadata?: boolean | undefined;
    } | undefined;
}>;
export type UpdatePeerPermissionSchema = z.infer<typeof UpdatePeerPermissionSchema>;
export declare const SendDataSchema: z.ZodObject<{
    roomId: z.ZodString;
    label: z.ZodOptional<z.ZodString>;
    payload: z.ZodString;
    peers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    admin: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    payload: string;
    roomId: string;
    label?: string | undefined;
    peers?: string[] | undefined;
    admin?: boolean | undefined;
}, {
    payload: string;
    roomId: string;
    label?: string | undefined;
    peers?: string[] | undefined;
    admin?: boolean | undefined;
}>;
export type SendDataSchema = z.infer<typeof SendDataSchema>;
export declare class Client {
    private __projectId;
    private __apiKey;
    private __url;
    private __baseAxios;
    constructor(data: {
        projectId: string;
        apiKey: string;
    });
    getPeerData: (data: {
        peerId: string;
        roomId: string;
    }) => Promise<{
        error?: Error | undefined;
        data: PeerDataSchema | null;
    }>;
    updatePermission: (data: UpdatePeerPermissionSchema) => Promise<{
        status: 'ok' | null;
        error?: string;
    }>;
    sendData: (data: SendDataSchema) => Promise<{
        status: string;
        error?: undefined;
    } | {
        status: null;
        error: string;
    }>;
}
export {};
//# sourceMappingURL=index.d.ts.map