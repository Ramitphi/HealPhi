"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.SendDataSchema = exports.PeerDataSchema = exports.PermissionSchema = void 0;
const zod_1 = require("zod");
const axios_1 = __importDefault(require("axios"));
const produceSourcesSchema = zod_1.z.array(zod_1.z.union([zod_1.z.literal('cam'), zod_1.z.literal('mic'), zod_1.z.literal('screen')]));
exports.PermissionSchema = zod_1.z.object({
    admin: zod_1.z.boolean(),
    canConsume: zod_1.z.boolean(),
    canProduce: zod_1.z.boolean(),
    canProduceSources: produceSourcesSchema,
    canSendData: zod_1.z.boolean(),
    canRecvData: zod_1.z.boolean(),
    canUpdateMetadata: zod_1.z.boolean(),
});
exports.PeerDataSchema = zod_1.z.object({
    peerId: zod_1.z.string().min(1).max(100),
    permissions: exports.PermissionSchema.partial(),
    metadata: zod_1.z.string().optional(),
});
const UpdatePeerPermissionSchema = zod_1.z.object({
    peerId: zod_1.z.string().min(1).max(100),
    roomId: zod_1.z.string().min(1).max(100),
    role: zod_1.z
        .union([
        zod_1.z.literal('host'),
        zod_1.z.literal('coHost'),
        zod_1.z.literal('speaker'),
        zod_1.z.literal('listener'),
        zod_1.z.literal('guest'),
        zod_1.z.string(),
    ])
        .optional(),
    permissions: exports.PermissionSchema.partial().optional(),
});
exports.SendDataSchema = zod_1.z.object({
    roomId: zod_1.z.string().min(1).max(100),
    label: zod_1.z.string().min(1).max(100).optional(),
    payload: zod_1.z.string().min(1).max(280),
    peers: zod_1.z.array(zod_1.z.string().min(1).max(100)).optional(),
    admin: zod_1.z.boolean().optional(),
});
class Client {
    __projectId;
    __apiKey;
    __url;
    __baseAxios;
    constructor(data) {
        console.info('üîî Initialising Client Side SDK');
        this.__apiKey = data.apiKey;
        this.__projectId = data.projectId;
        if (this.__projectId === 'development') {
            this.__url = 'http://localhost:8000/api/v1';
        }
        else
            this.__url = 'https://apira.huddle01.com/api/v1';
        this.__baseAxios = axios_1.default.create({
            baseURL: this.__url,
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': this.__apiKey,
            },
        });
    }
    getPeerData = async (data) => {
        try {
            const resp = await this.__baseAxios.post('/getPeerData', {
                peerId: data.peerId,
                roomId: data.roomId,
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.__apiKey,
                },
            });
            const peerData = resp.data;
            return {
                data: peerData,
            };
        }
        catch (error) {
            console.error('‚ùå Error In gettting Peer Data');
            console.error(error);
            const err = new Error('Error In gettting Peer Data');
            return {
                data: null,
                error: err,
            };
        }
    };
    updatePermission = async (data) => {
        try {
            const resp = await this.__baseAxios.post('/updatePermission', data, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.__apiKey,
                },
            });
            const responseData = resp.data;
            if (responseData.status !== 'ok') {
                throw new Error('Error In Updating Permission');
            }
            return {
                status: 'ok',
            };
        }
        catch (error) {
            console.error('‚ùå Error In Updating Permission');
            console.error(error);
            const err = new Error('Error In Updating Permission');
            return {
                status: null,
                error: err.message,
            };
        }
    };
    sendData = async (data) => {
        try {
            const resp = await this.__baseAxios.post('/sendData', data, {
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.__apiKey,
                },
            });
            const responseData = resp.data;
            if (responseData.status !== 'ok') {
                throw new Error('‚ùå Error In Sending Data');
            }
            return {
                status: 'ok',
            };
        }
        catch (error) {
            console.error('‚ùå Error In Sending Data');
            console.error(error);
            const err = new Error('Error In Sending Data');
            return {
                status: null,
                error: err.message,
            };
        }
    };
}
exports.Client = Client;
